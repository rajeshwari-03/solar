# -*- coding: utf-8 -*-
"""solar streamlit.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JMh0LW1ZC8wdO2ZPWwXTjKc1k4x66RbY
"""

!pip install streamlit

!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from PIL import Image
# import os
# import torch
# from torchvision import models, transforms
# import urllib.request
# import torch.nn.functional as F
# 
# # --- PAGE SETUP ---
# st.set_page_config(page_title="Image Classifier", layout="wide")
# st.title("🧠 Image Classification with ResNet18")
# st.write("Upload one or more images to get predictions with top-3 confidence scores using a pretrained model.")
# 
# # --- MODEL LOADING ---
# @st.cache_resource
# def load_model():
#     model = models.resnet18(pretrained=True)
#     model.eval()
#     return model
# 
# model = load_model()
# 
# # --- LABELS ---
# @st.cache_data
# def load_labels():
#     label_path = "imagenet_classes.txt"
#     if not os.path.exists(label_path):
#         urllib.request.urlretrieve(
#             "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt",
#             label_path
#         )
#     with open(label_path) as f:
#         return [line.strip() for line in f.readlines()]
# 
# labels = load_labels()
# 
# # --- TRANSFORM ---
# preprocess = transforms.Compose([
#     transforms.Resize(256),
#     transforms.CenterCrop(224),
#     transforms.ToTensor(),
#     transforms.Normalize(
#         mean=[0.485, 0.456, 0.406],
#         std=[0.229, 0.224, 0.225]
#     )
# ])
# 
# # --- FILE UPLOAD ---
# uploaded_folder = st.file_uploader(
#     "📂 Upload multiple images", type=["jpg", "jpeg", "png"], accept_multiple_files=True
# )
# 
# # --- PREDICT FUNCTION ---
# def predict_image(image):
#     input_tensor = preprocess(image).unsqueeze(0)
#     with torch.no_grad():
#         output = model(input_tensor)
#         probabilities = F.softmax(output[0], dim=0)
#         top3 = torch.topk(probabilities, 3)
#     top_classes = [labels[i] for i in top3.indices]
#     top_scores = [round(prob.item()*100, 2) for prob in top3.values]
#     return list(zip(top_classes, top_scores))
# 
# # --- DISPLAY RESULTS ---
# if uploaded_folder:
#     with st.spinner("Processing images..."):
#         for idx, uploaded_file in enumerate(uploaded_folder):
#             try:
#                 image = Image.open(uploaded_file).convert('RGB')
# 
#                 col1, col2 = st.columns([1, 1])
#                 with col1:
#                     st.image(image, caption=uploaded_file.name, use_column_width=True)
# 
#                 with col2:
#                     st.markdown("### 🔍 Top 3 Predictions")
#                     predictions = predict_image(image)
#                     for i, (label, score) in enumerate(predictions):
#                         st.write(f"**{i+1}. {label}** — {score:.2f}%")
# 
#                     st.progress(predictions[0][1] / 100)  # Confidence bar for top prediction
# 
#             except Exception as e:
#                 st.error(f"❌ Error processing {uploaded_file.name}: {e}")
#

!npm install localtunnel

!streamlit run /content/app.py &>/content/logs.txt & npx localtunnel --port 8501 & curl ipv4.icanhazip.com